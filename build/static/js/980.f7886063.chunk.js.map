{"version":3,"file":"static/js/980.f7886063.chunk.js","mappings":"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","sources":["components/FormValidation/TextFormSchema.js","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostForm/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","redux/selectors/profileSelectors.js","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst textFormSchema = Yup.object().shape({\r\n    newText: Yup.string()\r\n        //минимальная длина - 2 символа\r\n        .min(1, \"Must be longer than 1 character\")\r\n        //максимальная длина - 20 символов\r\n        .max(400, \"Too long message\")\r\n        .required(\"Required\"),\r\n});\r\nexport default textFormSchema;","import { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport './ProfileStatus.css';\r\n\r\nconst ProfileStatus = ({ userId, status, updateStatus }) => {\r\n\r\n    const authId = useSelector((state) => state.auth.id);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [stateStatus, setStateStatus] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setStateStatus(status);\r\n    }, [status]);\r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode);\r\n        updateStatus(stateStatus);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStateStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"profile-status\">\r\n            {\r\n                editMode ?\r\n                    <div>\r\n                        <input\r\n                            name='status'\r\n                            autoFocus={true}\r\n                            onBlur={toggleEditMode}\r\n                            value={stateStatus}\r\n                            onChange={onStatusChange} />\r\n                    </div> :\r\n                    <div>\r\n                        <span\r\n                            onDoubleClick={(userId === authId) ? toggleEditMode : null}>\r\n                            {status ? status : 'no status'}\r\n                        </span>\r\n                    </div>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default ProfileStatus;","import ProfileStatus from './ProfileStatus/ProfileStatus';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport './ProfileInfo.css';\r\nimport userSample from './../../../assets/images/user.png';\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\r\n    if (profile == null) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src='https://www.metoffice.gov.uk/binaries/content/gallery/metofficegovuk/hero-images/advice/maps-satellite-images/satellite-image-of-globe.jpg'\r\n                    alt='profile-bg'\r\n                    className='profile-bg' />\r\n            </div>\r\n            <div className='profile-info'>\r\n                <img src={profile.photos.large ? profile.photos.large : userSample}\r\n                    alt='profile-img'\r\n                    className='profile-image' />\r\n                <div className='profile-data'>\r\n                    <div className='profile-name'>\r\n                        {profile.fullName}\r\n                    </div>\r\n                    <ProfileStatus\r\n                        userId={profile.userId}\r\n                        status={status}\r\n                        updateStatus={updateStatus} />\r\n                    <div className='profile-aboutme'>\r\n                        <span className='profile-section-name'>About me:</span> {profile.aboutMe}\r\n                    </div>\r\n                    <div className='profile-job'>\r\n                        {profile.lookingForAJob ? 'Looking for job' : 'Not looking for job'}\r\n                        <div className='profile-job-status'>\r\n                            <span className='profile-section-name'>\r\n                                Job status:</span> {profile.lookingForAJobDescription}\r\n                        </div>\r\n                    </div>\r\n                    <div className='profile-contacts'>\r\n                        {Object.entries(profile.contacts).map(([key, value]) => {\r\n                            return (\r\n                                value ? <a className='profile-contacts-link'\r\n                                    key={key}\r\n                                    href={value.includes('https://') ?\r\n                                        value : 'https://' + value}>{key}</a> : null\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import './Post.css';\r\n\r\nconst Post = ({ message, likeCount }) => {\r\n    return (\r\n        <div className='posts-item'>\r\n            <div className='post-avatar'>\r\n                <img src=\"https://beebom.com/wp-content/uploads/2023/02/who-is-pain-in-naruto.jpg\" alt=\"avatar\" />\r\n            </div>\r\n            <div className='posts-message'>\r\n                {message}\r\n            </div>\r\n            <div className='posts-likes'>\r\n                <span>like: </span>\r\n                {likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport './../MyPosts.css';\r\nimport textFormSchema from \"../../../FormValidation/TextFormSchema\";\r\n\r\nconst AddPostForm = ({ addPost }) => {\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset } = useForm({\r\n            resolver: yupResolver(textFormSchema)\r\n        });\r\n\r\n    const onSubmit = (data) => {\r\n        onAddPost(data);\r\n        reset();\r\n    }\r\n\r\n    const onAddPost = (data) => {\r\n        addPost(data.newText);\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"posts-form\">\r\n            <textarea\r\n                className=\"post-text\"\r\n                placeholder=\"Write something\"\r\n                {...register(\"newText\", { required: true })} />\r\n            <span className=\"error-message\">{errors.newText?.message}</span>\r\n            <input\r\n                type=\"submit\"\r\n                className=\"post-btn\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddPostForm;","import Post from './Post/Post';\r\nimport './MyPosts.css';\r\nimport AddPostForm from './AddPostForm/AddPostForm';\r\n\r\nconst MyPosts = ({ addPost, postsData }) => {\r\n\r\n    let postElements = [...postsData].reverse();\r\n    return (\r\n        <div>\r\n            <h3>Posts</h3>\r\n            <AddPostForm addPost={addPost} />\r\n            <div className='posts'>\r\n                {\r\n                    postElements\r\n                        .map((post, i) => <Post\r\n                            key={i}\r\n                            message={post.message}\r\n                            likeCount={post.likeCount}\r\n                            id={post.id} />)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPosts;","export const getProfileState = (state) => {\r\n    return state.profilePage.profile;\r\n}\r\nexport const getStatusState = (state) => {\r\n    return state.profilePage.status;\r\n}\r\nexport const getPostsData = (state) => {\r\n    return state.profilePage.postsData;\r\n}\r\n","import { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/reducers/profileReducer';\r\nimport MyPosts from './MyPosts';\r\nimport { getPostsData } from '../../../redux/selectors/profileSelectors';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsData: getPostsData(state)\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = ({ profile, status, updateStatus }) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={profile}\r\n                status={status}\r\n                updateStatus={updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from '@reduxjs/toolkit';\r\nimport { withRouter } from '../../hoc/withRouter';\r\nimport Profile from './Profile';\r\nimport { getProfile, getStatus, updateStatus } from '../../redux/reducers/profileReducer';\r\nimport { getProfileState, getStatusState } from '../../redux/selectors/profileSelectors';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\n\r\nconst ProfileContainer = ({ getProfile, getStatus, router, id, profile, status, updateStatus, ...restProps }) => {\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let profilePromise = getProfile(router.params.userId || id);\r\n        let statusPromise = getStatus(router.params.userId || id);\r\n        Promise.all([profilePromise, statusPromise])\r\n            .then(() => {\r\n                setLoaded(true);\r\n            });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLoaded(false);\r\n        let profilePromise = getProfile(router.params.userId || id);\r\n        let statusPromise = getStatus(router.params.userId || id);\r\n        Promise.all([profilePromise, statusPromise])\r\n            .then(() => {\r\n                setLoaded(true);\r\n            });\r\n    }, [router.navigate]);\r\n\r\n    if (!loaded) {\r\n        return <Preloader />;\r\n    }\r\n    return (\r\n        <Profile {...restProps}\r\n            profile={profile}\r\n            status={status}\r\n            updateStatus={updateStatus}\r\n        />\r\n    );\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: getProfileState(state),\r\n        status: getStatusState(state)\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getProfile, getStatus, updateStatus }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n","import { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"@reduxjs/toolkit\";\r\nimport { getAuthId, getIsAuth } from \"../redux/selectors/authSelectors\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: getIsAuth(state),\r\n    id: getAuthId(state)\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    const AuthRedirectComponent = (props) => {\r\n        if (!props.isAuth) return <Navigate to='/login' />;\r\n        return <Component {...props} />\r\n    }\r\n    return compose(connect(mapStateToPropsForRedirect))(AuthRedirectComponent);\r\n}"],"names":["textFormSchema","Yup","shape","newText","min","max","required","_ref","userId","status","updateStatus","authId","useSelector","state","auth","id","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","stateStatus","setStateStatus","useEffect","toggleEditMode","_jsx","className","children","name","autoFocus","onBlur","value","onChange","e","currentTarget","onDoubleClick","profile","Preloader","_jsxs","src","alt","photos","large","userSample","fullName","ProfileStatus","aboutMe","lookingForAJob","lookingForAJobDescription","Object","entries","contacts","map","_ref2","_ref3","key","href","includes","message","likeCount","_errors$newText","addPost","_useForm","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","reset","onAddPost","data","onSubmit","_objectSpread","placeholder","type","postsData","postElements","_toConsumableArray","reverse","AddPostForm","post","i","Post","getProfileState","profilePage","getStatusState","getPostsData","connect","dispatch","newPostText","addPostActionCreator","MyPosts","ProfileInfo","MyPostsContainer","compose","getProfile","getStatus","withRouter","withAuthRedirect","router","restProps","_objectWithoutProperties","_excluded","loaded","setLoaded","profilePromise","params","statusPromise","Promise","all","then","navigate","Profile","mapStateToPropsForRedirect","isAuth","getIsAuth","getAuthId","Component","props","Navigate","to"],"sourceRoot":""}