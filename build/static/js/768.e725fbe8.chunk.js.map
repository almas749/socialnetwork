{"version":3,"file":"static/js/768.e725fbe8.chunk.js","mappings":"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","sources":["redux/selectors/usersSelectors.js","components/Users/UsersItem/UsersItem.jsx","components/Users/Paginator.jsx","components/Users/Users.jsx","components/Users/UsersContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["export const getUsersData = (state) => {\r\n    return state.usersPage.usersData;\r\n}\r\nexport const getPageSize = (state) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getCurrentPage = (state) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsLoading = (state) => {\r\n    return state.usersPage.isLoading;\r\n}\r\nexport const getFollowingInProgress = (state) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getTotalUsersCount = (state) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\n","import { NavLink } from 'react-router-dom';\r\nimport userSample from './../../../assets/images/user.png';\r\nimport './UsersItem.css';\r\n\r\nconst UsersItem = (props) => {\r\n    return (\r\n        <li className='user-item'>\r\n            <div className='user-item-left'>\r\n                <NavLink to={'/profile/' + props.id}>\r\n                    <img src={props.photo ? props.photo : userSample}\r\n                        alt=\"userImage\"\r\n                        className='user-item-img' />\r\n                </NavLink>\r\n                <button disabled={props.followingInProgress === props.id}\r\n                    onClick={() => props.onSwitchFollow(props.id, props.followed)}>\r\n                    {props.followed ? 'Unfollow' : 'Follow'}\r\n                </button>\r\n            </div>\r\n            <div className='user-item-right'>\r\n                <div className='user-item-info'>\r\n                    <span>{props.name}</span>\r\n                    <span className='user-item-info__status'>{props.status}</span>\r\n                </div>\r\n                <div className='user-item-location'>\r\n                    <span>city</span>\r\n                    <span>country</span>\r\n                </div>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default UsersItem;","import { useState, useEffect } from 'react';\r\nimport './Users.css';\r\n\r\nconst Paginator = ({ totalUsersCount, pageSize, currentPage, onChangePage, portionSize = 10 }) => {\r\n\r\n    const pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n    let pages = [];\r\n    for (let index = 1; index <= pagesCount; index++) {\r\n        pages.push(index);\r\n    }\r\n\r\n    const activePage = \"page-num page-num--selected\";\r\n    const normalPage = \"page-num\";\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    let slicedPages = pages\r\n        .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber);\r\n\r\n    useEffect(() => setPortionNumber(Math.ceil(currentPage / portionSize)), [currentPage]);\r\n\r\n    return (\r\n        <div className=\"users-page-changer\">\r\n            {\r\n                portionNumber > 1 &&\r\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>\r\n            }\r\n            {\r\n                slicedPages.map((page, i) => (\r\n                    <span\r\n                        key={i}\r\n                        className={currentPage === page ? activePage : normalPage}\r\n                        onClick={() => onChangePage(page)}>\r\n                        {page} </span>\r\n                ))\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Paginator;","import UsersItem from \"./UsersItem/UsersItem\";\r\nimport './Users.css';\r\nimport Paginator from \"./Paginator\";\r\n\r\nconst Users = ({ usersData, pageSize, currentPage, totalUsersCount, followingInProgress, onChangePage, requestFollow }) => {\r\n\r\n    let onSwitchFollow = (userId, followed) => {\r\n        requestFollow(userId, followed);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Users</h3>\r\n            <Paginator\r\n                totalUsersCount={totalUsersCount}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n                onChangePage={onChangePage} />\r\n            <ul className=\"users-wrapper\">\r\n                {\r\n                    usersData.map((user, i) => <UsersItem\r\n                        key={i}\r\n                        id={user.id}\r\n                        name={user.name}\r\n                        followed={user.followed}\r\n                        photo={user.photos.small}\r\n                        status={user.status}\r\n                        onSwitchFollow={onSwitchFollow}\r\n                        followingInProgress={followingInProgress} />)\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Users;","import { useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { compose } from \"@reduxjs/toolkit\";\r\nimport { getUsers, setFollow } from '../../redux/reducers/usersReducer';\r\nimport { getCurrentPage, getFollowingInProgress, getIsLoading, getPageSize, getTotalUsersCount, getUsersData } from \"../../redux/selectors/usersSelectors\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport Users from './Users';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst UsersContainer = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.getUsers(props.currentPage, props.pageSize);\r\n    }, [])\r\n\r\n    const onChangePage = (currentPage) => {\r\n        props.getUsers(currentPage, props.pageSize);\r\n    };\r\n\r\n    const requestFollow = (userId, followed) => {\r\n        props.setFollow(userId, followed);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.isLoading ?\r\n                <Preloader /> : <Users\r\n                    usersData={props.usersData}\r\n                    pageSize={props.pageSize}\r\n                    currentPage={props.currentPage}\r\n                    totalUsersCount={props.totalUsersCount}\r\n                    followingInProgress={props.followingInProgress}\r\n                    onChangePage={onChangePage}\r\n                    requestFollow={requestFollow} />}\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        usersData: getUsersData(state),\r\n        pageSize: getPageSize(state),\r\n        currentPage: getCurrentPage(state),\r\n        isLoading: getIsLoading(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        totalUsersCount: getTotalUsersCount(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUsers, setFollow }),\r\n    withAuthRedirect\r\n)(UsersContainer);\r\n\r\n","import { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"@reduxjs/toolkit\";\r\nimport { getAuthId, getIsAuth } from \"../redux/selectors/authSelectors\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: getIsAuth(state),\r\n    id: getAuthId(state)\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    const AuthRedirectComponent = (props) => {\r\n        if (!props.isAuth) return <Navigate to='/login' />;\r\n        return <Component {...props} />\r\n    }\r\n    return compose(connect(mapStateToPropsForRedirect))(AuthRedirectComponent);\r\n}"],"names":["getUsersData","state","usersPage","usersData","getPageSize","pageSize","getCurrentPage","currentPage","getIsLoading","isLoading","getFollowingInProgress","followingInProgress","getTotalUsersCount","totalUsersCount","props","_jsxs","className","children","_jsx","NavLink","to","id","src","photo","userSample","alt","disabled","onClick","onSwitchFollow","followed","name","status","_ref","onChangePage","_ref$portionSize","portionSize","pagesCount","Math","ceil","pages","index","push","portionCount","_useState","useState","_useState2","_slicedToArray","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","slicedPages","filter","page","useEffect","map","i","requestFollow","userId","Paginator","user","UsersItem","photos","small","compose","connect","getUsers","setFollow","withAuthRedirect","_Fragment","Preloader","Users","mapStateToPropsForRedirect","isAuth","getIsAuth","getAuthId","Component","_objectSpread","Navigate"],"sourceRoot":""}