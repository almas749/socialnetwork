{"version":3,"file":"static/js/808.05533abe.chunk.js","mappings":"4NAcA,EAZwBA,EAAAA,KAAaC,MAAM,CACvCC,MAAOF,EAAAA,KACFE,MAAM,yCAENC,IAAI,EAAG,oCAEPC,IAAI,GAAI,+CACRC,SAAS,YACdC,SAAUN,EAAAA,KACLG,IAAI,EAAG,oCACPE,SAAS,c,6BC0DlB,GAAeE,EAAAA,EAAAA,KAJS,SAACC,GAAK,MAAM,CAChCC,QAAQC,EAAAA,EAAAA,IAAUF,GACrB,GAEuC,CAAEG,MAAAA,EAAAA,IAA1C,EA7Dc,SAAHC,GAA2B,IAADC,EAAAC,EAAAC,EAApBJ,EAAKC,EAALD,MAAOF,EAAMG,EAANH,OAEpBO,GAMIC,EAAAA,EAAAA,IAAQ,CACRC,UAAUC,EAAAA,EAAAA,GAAYC,GACtBC,KAAM,WAPNC,EAAQN,EAARM,SACAC,EAAYP,EAAZO,aACAC,EAAQR,EAARQ,SACAC,EAAWT,EAAXS,YAAWC,EAAAV,EACXW,UAAaC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAUzB,OAAIpB,GACOqB,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAI,cAIrBC,EAAAA,EAAAA,MAAA,QAAMC,SAAUX,GATH,SAAHY,GAAyC,IAAnCjC,EAAKiC,EAALjC,MAAOI,EAAQ6B,EAAR7B,SAAU8B,EAAUD,EAAVC,WACjCzB,EAAMT,EAAOI,EAAU8B,EAAYZ,EACvC,IAO4Ca,UAAU,QAAOC,SAAA,EACrDR,EAAAA,EAAAA,KAAA,SAAAS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACIC,KAAK,OACLC,YAAY,SACRnB,EAAS,QAAS,CAClBjB,UAAU,EACVqC,QAAS,CACLC,MAAO,8CACPC,QAAS,mCAEf,IACFC,QAAS,kBAAMpB,EAAY,CAAC,QAAS,UAAU,MAEnDK,EAAAA,EAAAA,KAAA,QAAMO,UAAU,gBAAeC,SAAc,QAAdzB,EAAEe,EAAO1B,aAAK,IAAAW,OAAA,EAAZA,EAAc+B,WAC/Cd,EAAAA,EAAAA,KAAA,SAAAS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACIC,KAAK,WACLC,YAAY,YACRnB,EAAS,WAAY,CAAC,IAAE,IAC5BuB,QAAS,kBAAMpB,EAAY,CAAC,WAAY,UAAU,MAEtDK,EAAAA,EAAAA,KAAA,QAAMO,UAAU,gBAAeC,SAAiB,QAAjBxB,EAAEc,EAAOtB,gBAAQ,IAAAQ,OAAA,EAAfA,EAAiB8B,WAClDX,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACIR,EAAAA,EAAAA,KAAA,SAAAS,EAAAA,EAAAA,GAAA,CACIO,MAAO,CAAE,YAAe,OACxBN,KAAK,WACLO,GAAG,eACCzB,EAAS,aAAc,CAAC,MAChCQ,EAAAA,EAAAA,KAAA,SAAOkB,QAAQ,cAAaV,SAAC,oBAEjCR,EAAAA,EAAAA,KAAA,QAAMO,UAAU,gBAAeC,SAAe,QAAfvB,EAAEa,EAAOqB,cAAM,IAAAlC,OAAA,EAAbA,EAAe6B,WAChDd,EAAAA,EAAAA,KAAA,SAAOU,KAAK,SAASU,UAAWrB,MAG5C,G","sources":["components/FormValidation/LoginFormSchema.js","components/Login/Login.jsx"],"sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst loginFormSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email(\"Email address must be a valid address\")\r\n        //минимальная длина - 2 символа\r\n        .min(2, \"Must be longer than 2 characters\")\r\n        //максимальная длина - 20 символов\r\n        .max(30, \"The email should have at most 30 characters\")\r\n        .required(\"Required\"),\r\n    password: Yup.string()\r\n        .min(6, \"Must be longer than 6 characters\")\r\n        .required(\"Required\")\r\n});\r\nexport default loginFormSchema;","import { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport loginFormSchema from \"../FormValidation/LoginFormSchema\";\r\nimport { login } from \"../../redux/reducers/authReducer\";\r\nimport { getIsAuth } from \"../../redux/selectors/authSelectors\";\r\nimport './Login.css';\r\n\r\nconst Login = ({ login, isAuth }) => {\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        setError,\r\n        clearErrors,\r\n        formState: { errors, isValid }\r\n    } = useForm({\r\n        resolver: yupResolver(loginFormSchema),\r\n        mode: \"onBlur\"\r\n    });\r\n\r\n    const onSubmit = ({ email, password, rememberMe }) => {\r\n        login(email, password, rememberMe, setError);\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={\"/profile\"} />;\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className=\"login\">\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Email\"\r\n                {...register(\"email\", {\r\n                    required: true,\r\n                    pattern: {\r\n                        value: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                        message: 'Pleace enter the valid email'\r\n                    }\r\n                })}\r\n                onFocus={() => clearErrors([\"email\", \"server\"])}\r\n            />\r\n            <span className=\"error-message\">{errors.email?.message}</span>\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                {...register(\"password\", {})}\r\n                onFocus={() => clearErrors([\"password\", \"server\"])}\r\n            />\r\n            <span className=\"error-message\">{errors.password?.message}</span>\r\n            <div>\r\n                <input\r\n                    style={{ 'marginRight': '5px' }}\r\n                    type=\"checkbox\"\r\n                    id=\"remember_id\"\r\n                    {...register(\"rememberMe\", {})} />\r\n                <label htmlFor=\"remember_id\">Remember me</label>\r\n            </div>\r\n            <span className=\"error-message\">{errors.server?.message}</span>\r\n            <input type=\"submit\" disabled={!isValid} />\r\n        </form>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: getIsAuth(state)\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);"],"names":["Yup","shape","email","min","max","required","password","connect","state","isAuth","getIsAuth","login","_ref","_errors$email","_errors$password","_errors$server","_useForm","useForm","resolver","yupResolver","loginFormSchema","mode","register","handleSubmit","setError","clearErrors","_useForm$formState","formState","errors","isValid","_jsx","Navigate","to","_jsxs","onSubmit","_ref2","rememberMe","className","children","_objectSpread","type","placeholder","pattern","value","message","onFocus","style","id","htmlFor","server","disabled"],"sourceRoot":""}